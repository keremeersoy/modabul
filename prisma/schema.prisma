generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String?
    password          String?
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    surname       String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt


    savedAdverts    AdvertSave[]
    accounts      Account[]
    sessions      Session[]
    adverts       Advert[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ilan
model Advert {
    id            String   @id @default(cuid())
    title         String
    price         Int
    description   String?
    size          String
    gender        String
    color         String
    isChildCloth  Boolean
    isFree        Boolean
    isUsed        Boolean
    phone         String?
    savedCount    Int      @default(0)
    userId        String
    categoryId    String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt


    location      AdvertLocation?
    images        AdvertImage[]
    advertSaves   AdvertSave[]
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    category      Category @relation(fields: [categoryId], references: [id])

    @@index([userId])
    @@index([categoryId])
}

model AdvertImage {
    id          String   @id @default(cuid())
    url         String

    advertId    String
    advert      Advert   @relation(fields: [advertId], references: [id], onDelete: Cascade)

    @@index([advertId])
}

model AdvertLocation {
    id          String   @id @default(cuid())
    city        String
    detail      String?

    advertId    String
    advert      Advert   @relation(fields: [advertId], references: [id], onDelete: Cascade)

    @@unique([advertId])
}

model Category {
    id          String   @id @default(cuid())
    name        String

    adverts     Advert[]
}

model AdvertSave {
    id          String   @id @default(cuid())

    advertId    String
    advert      Advert   @relation(fields: [advertId], references: [id], onDelete: Cascade)

    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)


    @@index([userId])
    @@unique([advertId, userId])
}